---
- name: Gather credentials - PB1
  hosts: all
  gather_facts: false
# prerequisites = have a collections folder in your repo
# with requirements.yml in it with the following:
#---
#
#collections:
#- pge_util.papm_util
##

  tasks:
# 
# task needed for credentials in playbookone.yml
#
  - name: Include task list in play - import - task 1
    ansible.builtin.import_tasks:
      # make sure to have playbookone in your repo 
      file: playbookone.yml

- name: PB2
  hosts: all
  vars :
    svc: Unknown
    svcname: masvc
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: '{{ ansible_user }}'
    ansible_become_pass: '{{ ansible_password }}'
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  gather_facts: true
  ignore_errors: true
  tasks:

      - name: Check service exists
        vars:
          ansible_become: yes
          ansible_become_method: runas
          ansible_become_user: '{{ ansible_user }}'
          ansible_become_pass: '{{ ansible_password }}'
          ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only      
        ansible.windows.win_service_info:
          name: "{{ svcname }}"

        register: svcinfo

      - name: Check service state
        vars:
          ansible_become: yes
          ansible_become_method: runas
          ansible_become_user: '{{ ansible_user }}'
          ansible_become_pass: '{{ ansible_password }}'
          ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
        ansible.windows.win_service:
          name: "{{ svcname }}"
        register: svcdata
        when: svcinfo.exists == true

      - name: service not there
        set_fact:
          svc: UNKNOWN - {{ svcname }} - cannot read status, verify manually
        when: svcinfo.exists == true

      - name: if service exists return state in svc
        block:
          - name: Service there returns state on svc var
            set_fact:
              svc: "Pass - {{ svcname }} - exists and state is {{ svcdata.state }}"
            when: svcdata.state|lower == "running"

          - name: Service there returns state on svc var
            set_fact:
              svc: Fail - {{ svcname }} - exists and state is {{ svcdata.state }}
            when: svcdata.state|lower != "running"
        when: svcinfo.exists == true

      - name: service not there
        set_fact:
          svc: FAIL - {{ svcname }} -   service not there 
        when: svcinfo.exists == false
      
      


      - name: svc
        debug:
          msg: "FINAL:  svc {{ svcname }} {{ svc }}"



  


    







  
